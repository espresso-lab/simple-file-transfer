apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "simple-file-transfer.fullname" . }}
  labels:
    {{- include "simple-file-transfer.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "simple-file-transfer.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "simple-file-transfer.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: S3_ENDPOINT
              value: {{ .Values.config.s3.endpoint }}
            - name: AWS_REGION
              value: {{ .Values.config.s3.region }}
            - name: S3_BUCKET_NAME
              value: {{ .Values.config.s3.bucket }}
            - name: S3_FORCE_PATH_STYLE
              value: {{ .Values.config.s3.forcePathStyle | quote }}
            - name: CORS_ALLOWED_ORIGINS
              value: {{ .Values.config.corsAllowedOrigins | quote }}
            - name: LINK_SHORTENER_ENDPOINT
              value: {{ .Values.config.linkShortener.endpoint | quote }}
            - name: LINK_SHORTENER_RANDOM_SLUG
              value: {{ .Values.config.linkShortener.randomSlug | quote }}
            {{- if .Values.config.s3.existingSecret }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.config.s3.existingSecret }}
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.config.s3.existingSecret }}
                  key: AWS_SECRET_ACCESS_KEY
            {{- else }}
            - name: AWS_ACCESS_KEY_ID
              value: {{ .Values.config.s3.accessKeyId }}
            - name: AWS_SECRET_ACCESS_KEY
              value: {{ .Values.config.s3.secretAccessKey }}
            {{- end }}
            {{- if .Values.extraEnvVars }}
            {{- toYaml .Values.extraEnvVars | nindent 12 }}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /status
              port: {{ .Values.service.port }}
          readinessProbe:
            httpGet:
              path: /status
              port: {{ .Values.service.port }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
